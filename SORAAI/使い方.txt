========== ========== ========== ========== ==========
                 空藍家のおこた 使い方
========== ========== ========== ========== ==========

＊概要
	TRPGリプレイの再生を行います。
	また、ほかにもいくつかの使い方が考えられます。
	記述されたスクリプトを読み上げていくソフトウェアです。
	ソケット通信を利用した棒読みちゃんの読み上げに対応しています。
	録画することで動画共有サイトへ投稿できます。

---------- ---------- ---------- ---------- ----------

＊ファイル構成
	"SORAAI.exe"		実行ファイル
	
	"Common"			共通フォルダ
	"Project"			プロジェクトフォルダ

	"README.txt"		仕様書
	"History.txt"		更新履歴
	"使い方.txt"		本書

	"ProjectPath.txt"	プロジェクトパス指定

---------- ---------- ---------- ---------- ----------

＊棒読みちゃんによる読み上げ
	セリフを棒読みちゃんに読み上げてもらうことが可能です。
	ソケット通信を利用しているので棒読みちゃんを起動してください。

---------- ---------- ---------- ---------- ----------

＊プロジェクト
	読み上げに伴いプロジェクトが存在します。
	"Project"フォルダ内にプロジェクトを作成してください。
	初めは、"Sample"というプロジェクトがあります。

＊プロジェクトの指定
	実行するプロジェクトは"ProjectPath.txt"へと、
	"SORAAI.exe"からの相対パスで記述してください。
	例えばサンプルの場合、
	.\\Project\\Sample\\
	のようになります。

---------- ---------- ---------- ---------- ----------

＊関数
	スクリプト内に関数を記述していきます。
	そして関数は関数を呼びます。
	例えば、FUNCはHOGE1とHOGE2を呼ぶ場合、
	FUNC
	{
		HOGE1
		{
		}
		HOGE2
		{
		}
	}
	となります。

＊引数
	関数には引数というものが渡せます。
	先ほどの例に加え、HOGE1に文字列を二つ渡す場合、
	FUNC
	{
		HOGE1
		{
			abc
			あいうえお
		}
		HOGE2
		{
		}
	}
	となります。
	HOGE1に"abc"と"あいうえお"を渡せます。

＊MAIN関数
	スクリプトはMAIN関数が初めに呼び出されます。
	つまり、MAIN関数内に動作を記述してください。
	例えばMAIN関数内でFUNCを呼ぶ場合、
	MAIN
	{
		FUNC
		{
		}
	}
	となります。

＊内部関数
	上の例ではユーザ関数となります。
	ユーザが自由に定義することが可能です。
	それに対し、内部の関数を呼び出すのが内部関数です。
	例えば画像の読み込みは_LoadImg関数を使用します。
	MAIN
	{
		_LoadImg
		{
			.\\Common\\Img\\window.png
			6
			0
		}
	}
	1番目が画像ファイルのパス、
	2番目が読み込むレイヤ(後述)、
	3番目が読み込む添え字(後述)となります。
	また、この場合は特別です(後述)。

＊引数を引数に
	関数を作成する際、引数を使いたい時があります。
	ここでは"~"(チルダ)を使用することで指定できます。
	例えば、
	FUNC1は引数が文字列2つ、
	FUNC2は引数が文字列1つ、
	FUNC1ではFUNC2を2回呼び、
	引数それぞれを渡す、
	といった場合は、
	MAIN
	{
		FUNC1
		{
			あいう
			かきく
		}
	}
	FUNC1
	{
		FUNC2
		{
			~0
		}
		FUNC2
		{
			~1
		}
	}
	となります。

＊SYSTEM_INIT関数
	ユーザが指定する関数です。
	使用しない場合は記述しなくても問題ないです。
	MAIN関数より先に一度だけ呼ばれる関数で、
	主にタイトルの変更等、先に行いたい物を記述してください。
	なお、DxLib初期化前なので画像の読み込み等はできません。

---------- ---------- ---------- ---------- ----------

＊Commonとは
	共通でスクリプトや画像などを保管します。
	プロジェクトで読み込むスクリプトは、
	プロジェクトフォルダ内Scriptフォルダと、
	コモンフォルダ内Scriptフォルダ内に存在する、
	すべての".txt"ファイルを対象とします。

＊共通スクリプトの利点
	ユーザが作成時に良く使う関数を、
	他のプロジェクト作成時でも使えるため便利になる。

---------- ---------- ---------- ---------- ----------

＊描画
	現在15枚のレイヤを持ちます。
	描画する際は添え字の大きなものから描画していきます。
	14->0となります。
	細かい指定はありませんが添え字が"6"がセリフです。
	文字列の描画はここに描画されセリフとなります。

＊レイヤの初期化
	レイヤは必要な時にだけ初期化を行えます。
	画面に変動がないときは極力再描画していません。

＊画像の読み込み
	各レイヤ毎に100枚ずつ画像が読み込めます。
	他のレイヤに描画することはできません。

＊セリフ
	内部関数の呼び出しでテキストを描画します。
	この時レイヤ"6"の添え字"0"がウィンドウになります。
	
＊画像の描画
	いくつか内部関数が存在すると思いますが、
	x,y座標,レイヤ,添え字を指定してください。

---------- ---------- ---------- ---------- ----------

＊記述のポイント
	スクリプトの記述は内部処理により制約があります。

＊中括弧({,})は単体で使用する
	○
	MAIN
	{
	}
	×
	MAIN{
	}

＊"_"がつくものが内部関数である
	つまりユーザ関数名は"_"から始めてはいけない。

＊"//"から始まる行はコメントアウト
	実行しない行、どちらかと言えば無視する行
	MAIN
	{
		//FUNC1
		//{
		//}
	}

＊" "スペースを入れない
	Tabは解読時に無視しますが、スペースはしていません。
	不具合の原因となります。
	エディタ等で、タブをスペースに変換するものは使用できません。

---------- ---------- ---------- ---------- ----------

＊デバッグについて
	バグの出力機能は今のところほとんどありません。

＊関数が存在しない場合
	メッセージボックス"○ is not found"が出現します。
	関数は{}の対応が重要です。
	ネストされていない}があった時に関数を追加します。

---------- ---------- ---------- ---------- ----------

＊実行中の操作
	基本的に自動で実行し、終了しますが、
	いくつかの操作があります。

＊ESCキー
	ただちに終了します。

＊SPACEキー(押したときのみ)
	タイマをすべて消去し、速やかに次を実行します。

＊左シフトキー(押されている間)
	タイマをすべて消去し、速やかに次を実行します。

---------- ---------- ---------- ---------- ----------

＊内部関数一覧
	_Go	
		タスク実行
		()
		タスクを実行
	_SayMostEasy
		セリフの簡易表示
		(name, graph, 1, 2, 3, 4)
		名前、レイヤ6の画像、1〜4行目で表示
	_LoadImg
		画像読み込み	
		(path, layer, index)
		相対パス、レイヤ、インデックス
	_DrawImg
		画像の表示
		(x, y, layer, index)
		座標、レイヤ、インデックス
	_SayNMostEasy
		ナレーションの簡易表示
		(1, 2, 3, 4)
		1〜4行目で表示
	_ClearLayer
		レイヤの初期化
		(layer)
		対応レイヤの初期化
	_Wait
		ウエイト
		(frame)
		frame(1/60秒)待機
	_Fade
		フェード
		(frame, alpha, layer)
		frameでlayerのαをalphaに変更
	_SetTitle
		タイトルの変更
		(name)
		ウィンドウのタイトルをnameに変更
	_EnableYukkuri
		棒読みちゃん有効化
		()
		棒読みちゃんと通信初期化
	_SetYukkuri
		喋り方の設定
		(speed, tone, vol, voice)
		速度、音程、音量、声質を指定
	_SayYukkuriEasy
		セリフの簡易読み上げ表示
		(name, graph, 1, 2, 3, 4)
		指定した喋り方でセリフを読み上げ表示
	_SetYukkuriYomi,
		ゆっくり辞書追加
		(kaki, yomi)
		特定の単語の読みを棒読みちゃんの辞書に登録
	_DelYukkuriYomi,
		ゆっくり辞書削除
		(kaki)
		登録した単語を削除

---------- ---------- ---------- ---------- ----------

＊サンプルを参考に
	サンプルを見ることで大まかな作り方が分かります。

＊画像の読み込み
	ユーザ関数LOADIMG関数で画像のロードを行う。
	顔グラフィックとウィンドウと背景を読み込む。
	関数内では内部関数_LoadImg関数で読み込んでいる。

＊ナレーション
	ユーザ関数SAY_N関数で表示を行っている。
	関数内では内部関数_SayNMostEasy関数を使用し、
	関数の引数をそのまま渡している。
	そのあと内部関数_Go関数で実行している。

＊ウエイト
	ユーザ関数WAIT関数により待機を行う。
	関数内で内部関数_Wait関数を呼ぶ。
	180frame(3秒)待機する。
	但し、ナレーションのウエイトと被っているため、
	実際の時間より短くなっている。

＊棒読みちゃんの読み上げ待ち
	読み上げに合わせて自動でセリフを読み進めていく。

＊棒読みちゃんの辞書連携
	特定の読み方を棒読みちゃんに教えておく。
	辞書追加作業は時間がかかるので非推奨。
	若干エラーメッセージの要因。
	あまり連続した辞書追加を行うと固まるため注意。

＊セリフ
	ナレーションに加え、名前と画像が追加されている。

＊画像の表示
	内部関数_DrawImg関数で描画している。
	直前で内部関数_ClearLayer関数でレイヤの初期化を行う。

＊極論
	ユーザ関数SAY関数でどんどん追加すればそれらしくなる。
	しかし、関数あたりの最大文字数が決まっているため、
	定期的に関数に分ける必要がある。

---------- ---------- ---------- ---------- ----------

＊" "スペースの利用法
	Tabはすべて無効化されるがスペースはそうではない。
	例えばセリフに1行ずらして表示する際、
	改行しただけだと、それは無視される。
	そのためスペースを一つ入れるだけで解決できる。

---------- ---------- ---------- ---------- ----------

＊以下定義等による制限
	#define CALL_STACK_MAX 10		// スタックの階層
	#define CALL_VAL_MAX 10			// スタックの要素数
	#define STRING_MAX 256			// 関数名の長さ
	#define HASH_SIZE 1000			// ユーザ定義関数の数
	#define FUNCTION_SIZE 100000	// ユーザ定義関数の文字数
	#define LINE_MAX 256			// 一行に記述できる文字数
	#define PATH_MAX 256			// パス
	#define DEF_SIZE 500			// 予約関数の数
	#define TASK_SIZE 500			// タスクの数
	#define IMAGE_MAX 100			// 各レイヤ毎の画像ハンドル
	#define TITLE_MAX 256			// タイトルの最大文字長

---------- ---------- ---------- ---------- ----------
